InputManager类
================

概述
--------

InputManager类是用于管理应用运行期间发送的所有事件的核心类。它负责根据指定的输入策略生成和发送事件，支持随机输入、引导输入、无策略输入和LLM策略输入。该类提供了灵活的事件管理机制，允许用户自定义事件生成策略，并能够根据应用的运行状态动态调整事件发送。

类属性
--------

- ``DEFAULT_POLICY``: 默认的输入策略名称。
- ``RANDOM_POLICY``: 随机输入策略名称。
- ``DEFAULT_EVENT_INTERVAL``: 默认事件间隔时间。
- ``DEFAULT_EVENT_COUNT``: 默认生成事件的数量。
- ``DEFAULT_TIMEOUT``: 默认超时时间。
- ``DEFAULT_DEVICE_SERIAL``: 默认设备序列号。
- ``DEFAULT_UI_TARPIT_NUM``: 默认UI陷阱数量。
  

主要方法
~~~~~~~~

- ``__init__``: 初始化InputManager实例。
- ``get_input_policy``: 根据策略名称获取对应的输入策略实例。
- ``add_event``: 向事件列表中添加一个事件。
- ``start``: 开始发送事件。
- ``stop``: 停止发送事件。

构造函数
-----------

__init__方法
~~~~~~~~~~~~~~~

``__init__`` 方法用于初始化InputManager实例，设置事件发送的基本参数，并根据提供的策略名称初始化对应的输入策略。

:参数:
   - ``device``: Device实例，表示目标设备。
   - ``app``: App实例，表示目标应用。
   - ``policy_name``: 字符串，指定生成事件的策略名称。
   - ``random_input``: 布尔值，指示是否使用随机输入。
   - ``event_interval``: 事件间隔时间。
   - ``event_count``: 事件生成数量，默认为``DEFAULT_EVENT_COUNT``。
   - ``script_path``: 脚本路径，用于加载自定义脚本。
   - ``profiling_method``: 分析方法，用于性能分析。
   - ``master``: 主控制实例，用于协调多个InputManager实例。
   - ``replay_output``: 重放输出，用于记录和重放事件。
   - ``kea``: Kea实例，用于性质测试。
   - ``number_of_events_that_restart_app``: 重启应用的事件数量。
   - ``generate_utg``: 布尔值，指示是否生成UTG。

:核心流程:
   1. 初始化日志记录器。
   2. 设置事件发送参数。
   3. 加载自定义脚本（如果提供）。
   4. 根据策略名称初始化输入策略。
   5. 设置相似度计算器。

输入策略获取
--------------

get_input_policy方法
~~~~~~~~~~~~~~~~~~~~~~~~

``get_input_policy`` 方法根据提供的策略名称返回对应的输入策略实例。支持的策略包括无策略、引导策略、随机策略和LLM策略。

:参数:
   - ``device``: Device实例。
   - ``app``: App实例。
   - ``master``: 主控制实例。

:返回:
   - 输入策略实例。

:核心流程:
   1. 根据策略名称判断使用哪种输入策略。
   2. 创建对应的输入策略实例。
   3. 如果输入策略是KeaInputPolicy的子类，设置脚本和主控制实例。

事件添加
-----------

add_event方法
~~~~~~~~~~~~~~~~~~~~

``add_event`` 方法用于向事件列表中添加单个事件，并记录和发送事件到设备。

:参数:
   - ``event``: 要添加的事件，应为AppEvent的子类。

:核心流程:
   1. 将事件添加到事件列表。
   2. 创建事件日志记录器。
   3. 根据事件间隔时间发送事件到设备。

事件发送
-----------

start方法
~~~~~~~~~~~~~~~~~~~~

``start`` 方法用于开始发送事件，根据设置的策略生成和发送事件。

:核心流程:
   1. 记录开始发送事件的日志。
   2. 根据输入策略开始发送事件。
   3. 处理键盘中断，确保优雅退出。

stop方法
~~~~~~~~~~~~~~~~~~~~

``stop`` 方法用于停止发送事件，确保所有事件发送完毕并清理资源。

:核心流程:
   1. 终止事件发送。
   2. 清理事件发送相关的资源。
   3. 记录停止发送事件的日志。
.. 
 异常类
 --------
 UnknownInputException
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ``UnknownInputException``是InputManager类中定义的异常类，用于处理未知输入的情况。

使用方法
--------

InputManager类的主要作用是管理应用运行期间的事件发送。用户可以通过构造函数初始化InputManager实例，并设置相应的参数，如设备、应用、策略名称等。然后，可以通过add_event方法添加单个事件，通过start方法开始发送事件，通过stop方法停止发送事件。