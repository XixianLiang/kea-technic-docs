RandomPolicy类
===========================

RandomPolicy类是工具中用于生成基于当前应用状态的随机事件的策略类。在RandomPolicy类中，存储的内容和对外暴露的方法主要有：

- 根据应用状态生成随机事件的方法。
- 根据策略重启应用或清除并重新安装应用的方法。
- 检查性质并执行相应规则的方法。

..
 .. figure:: ../../../images/class_randompolicy.png
    :align: center

    RandomPolicy类的组成

RandomPolicy类中的数据结构
-----------------------

1. **事件计数器(event_count)**
   
   用于跟踪生成的事件数量，以决定何时重启应用或执行其他策略。

2. **最后旋转事件(last_rotate_events)**
   
   存储最后一次旋转设备的事件，用于生成与上次不同的旋转事件。

RandomPolicy类中的成员方法
-------------------------

构造函数
~~~~~~~~~~~~~~~

__init__方法
~~~~~~~~~~~~~~~

``__init__`` 方法用于初始化RandomPolicy实例，并设置随机事件生成的基本参数。

:参数:
   - ``device``: 设备实例。
   - ``app``: 应用实例。
   - ``kea``: Kea实例，用于性质测试。
   - ``restart_app_after_check_property``: 检查性质后是否重启应用。
   - ``number_of_events_that_restart_app``: 重启应用前的事件数量。
   - ``clear_and_reinstall_app``: 是否清除并重新安装应用。
   - ``allow_to_generate_utg``: 是否允许生成UTG。

:返回:
   - 无

:核心流程:
   1. 调用父类构造函数初始化设备、应用和Kea实例。
   2. 设置重启应用和清除安装的相关参数。
   3. 初始化日志记录器。
   4. 设置最后旋转设备的事件。

生成随机事件的方法
~~~~~~~~~~~~~~~~~~~~~~~

generate_event方法
~~~~~~~~~~~~~~~~~~~~~~~

``generate_event`` 方法用于生成一个随机事件。

:参数:
   - 无

:返回:
   - 生成的事件对象。

:核心流程:
   1. 检查是否需要运行初始化器并获取当前应用状态。
   2. 根据事件计数和设置决定是否重启应用或清除并重新安装应用。
   3. 检查是否有满足前提条件的规则，并根据随机性决定是否检查性质。
   4. 生成基于当前状态的随机事件。

generate_random_event_based_on_current_state方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``generate_random_event_based_on_current_state`` 方法用于基于当前状态生成一个随机事件。

:参数:
   - 无

:返回:
   - 生成的事件对象。

:核心流程:
   1. 获取当前应用状态。
   2. 如果需要，将应用移至前台。
   3. 获取当前状态可能的输入事件。
   4. 根据随机选择生成一个事件。

